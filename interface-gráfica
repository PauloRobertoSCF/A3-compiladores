import tkinter as tk
from tkinter import messagebox
from semantic import SemanticAnalyzer  # Supondo que o SemanticAnalyzer esteja em semantic.py
from code_generator import CodeGenerator  # Supondo que o CodeGenerator esteja em code_generator.py
from parser import parser  # Supondo que o parser esteja em parser.py
from ast import *  # Supondo que a AST esteja definida no arquivo ast.py


class CompilerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Compilador de Linguagem Fictícia")

        # Criação da interface gráfica
        self.create_widgets()

    def create_widgets(self):
        # Área de texto para o código-fonte
        self.code_text = tk.Text(self.root, height=20, width=60)
        self.code_text.pack(pady=10)

        # Botão para compilar o código
        self.compile_button = tk.Button(self.root, text="Compilar", command=self.compile_code)
        self.compile_button.pack(pady=5)

        # Área para mostrar a saída do compilador
        self.output_label = tk.Label(self.root, text="Saída do compilador:")
        self.output_label.pack(pady=5)
        self.output_text = tk.Text(self.root, height=10, width=60)
        self.output_text.pack(pady=10)

    def compile_code(self):
        # Recupera o código digitado pelo usuário
        code = self.code_text.get("1.0", tk.END)

        # Realiza o processo de compilação
        try:
            # Passo 1: Análise léxica (lexer)
            lexer = lex.lex()  # Supondo que o lexer já esteja configurado
            lexer.input(code)

            # Passo 2: Análise sintática (parser)
            program_ast = parser.parse(code)  # Supondo que o parser já esteja configurado

            # Passo 3: Análise semântica
            semantic_analyzer = SemanticAnalyzer()
            semantic_analyzer.analyze_program(program_ast)  # Supondo que você tenha esse método
            print("Análise semântica concluída com sucesso.")

            # Passo 4: Geração de código
            code_generator = CodeGenerator()
            generated_code = code_generator.generate_code(program_ast)  # Gera o código C, por exemplo

            # Exibe o código gerado na interface
            self.show_output(generated_code)

        except Exception as e:
            # Exibe erros no caso de falhas no processo de compilação
            messagebox.showerror("Erro de compilação", str(e))

    def show_output(self, generated_code):
        # Exibe a saída do código gerado
        self.output_text.delete(1.0, tk.END)
        self.output_text.insert(tk.END, generated_code)


if __name__ == "__main__":
    root = tk.Tk()
    gui = CompilerGUI(root)
    root.mainloop()

